#!/usr/bin/ruby
require 'docopt'
require 'cardano_wallet'


doc = <<DOCOPT
Wallet test aid

Usage:
  #{__FILE__} byron2byron --port=<port> <wid1> <wid2>


Args:
  byron2byron   Run txs back and forth between 2 Byron wallets <wid1> <wid2>


Options:
  -h --help     Show this screen.


DOCOPT

##
# Generate n Byron addresses for wallet wid
def gen_byron_addrs(wid, passphrase, n)
  addresses = []
  puts "Generating #{n} Byron addresses..."
  1.upto n do
    addresses << @byron.addresses.create(wid, {passphrase: passphrase})['id']
  end
  addresses
end

##
# Generate amt of lovelace to send (between 1..501k ADA in lovelace)
def gen_amt
  max = [10, 100, 1000, 10000, 100000, 200000, 300000, 400000, 500000].sample
  amt_ada = [*1..max].sample
  rndm = 1 + ([*1..1000000].sample.to_f / 1000000)
  amt = amt_ada * 1000000 * rndm
  amt.to_i
end

##
# send multi address tx from byron wallet to addresses
def send_byron(wsrc, passphrase, addresses)
  addr_amt = Hash[ *addresses.collect { |v| [ v, gen_amt ] }.flatten ]
  puts @byron.transactions.create(wsrc, passphrase, addr_amt)
  puts "-----"
end

begin
  # require 'pp'

  args = Docopt::docopt(doc)
  @cw = CardanoWallet.new({ port: args['--port'].to_i })
  @byron = @cw.byron

  ##
  # Send transactions between two byron wallets
  if args['byron2byron']
    wid1 = args['<wid1>']
    wid2 = args['<wid2>']

    while 1 do
      passphrase = "Secure Passphrase"
      addresses = gen_byron_addrs(wid2, passphrase, [*1..50].sample)
      5.times{ send_byron(wid1, passphrase, addresses) }
      # sleep 2
      addresses = gen_byron_addrs(wid1, passphrase, [*1..50].sample)
      5.times{ send_byron(wid2, passphrase, addresses) }
    end
  end

rescue Docopt::Exit => e
  puts e.message
end
